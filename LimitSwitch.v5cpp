{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nlimit LimitSwitch = limit(Brain.ThreeWirePort.H);\nmotor cataMotor = motor(PORT1, ratio36_1, false);\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {ur mom}                                                  */\n/*    Created:      {1/17/23}                                                 */\n/*    Description:  teaching moment                                           */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n//two different ways to code a limitswitch\n//must initialize a limit switch and a motor first\n\n//my personal choice, it brings the catapult down automatically until the limit switch is triggered\n//takes control away from the driver so they don't have to focus on it \nvoid cataCode(){\n  cataMotor.setStopping(hold);\n  \n  while(LimitSwitch == false){\n    cataMotor.spin(forward);\n  }\n}\n\n//allows you to use the current controls you have, just stops the motor when the limit switch is triggered\nvoid simpleCata(){\n  \n  cataMotor.setStopping(hold);\n  \n    if(LimitSwitch == true){\n      cataMotor.stop();\n    }\n  \n  }\n\n}\n\n\nint main(){\n  //using this will hopefully keep the catapult in place since Dhron won't build a ratchet\n    cataMotor.setStopping(hold);\n\n  //this triggers the automatic drawback every time the catapult is fired\n    LimitSwitch.released((cataCode);\n\n  //the other version\n    LimitSwitch.pressed((cataCode);\n\n \n}\n","textLanguage":"cpp","rconfig":[{"port":[8],"name":"LimitSwitch","customName":true,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{},"triportSourcePort":22},{"port":[1],"name":"cataMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"}}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}