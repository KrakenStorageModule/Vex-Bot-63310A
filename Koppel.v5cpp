{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor Intake = motor(PORT7, ratio6_1, true);\n\nmotor Catapult = motor(PORT8, ratio36_1, false);\n\ncontroller Controller1 = controller(primary);\nmotor leftMotorA = motor(PORT1, ratio18_1, false);\nmotor leftMotorB = motor(PORT2, ratio18_1, false);\nmotor leftMotorC = motor(PORT3, ratio18_1, true);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB, leftMotorC);\nmotor rightMotorA = motor(PORT4, ratio18_1, true);\nmotor rightMotorB = motor(PORT5, ratio18_1, true);\nmotor rightMotorC = motor(PORT6, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB, rightMotorC);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\nbumper Catacheck = bumper(Brain.ThreeWirePort.A);\n\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonL1/ButtonL2 status to control Intake\n      if (Controller1.ButtonL1.pressing()) {\n        Intake.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        Intake.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        Intake.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control Catapult\n      if (Controller1.ButtonR1.pressing()) {\n        Catapult.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        Catapult.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        Catapult.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  return 0;\n}\n\n//Brake function\nvoid Brake() {\n  \n  if(Controller1.ButtonA.pressing()){\n    Drivetrain.setStopping(hold);\n    Drivetrain.stop();\n  }else{\n    Drivetrain.setStopping(brake);\n\n  }\n}\n\nvoid torqueMode(){\n\n  if(Controller1.ButtonX.pressing()){\n   Drivetrain.setDriveVelocity(130,rpm);\n  \n  }else{\n    Drivetrain.setDriveVelocity(200,rpm);\n  }\n\n}\n\n\nvoid rollerMode(){\n\n  if(Controller1.ButtonB.pressing()){\n    Intake.setVelocity(150, rpm);\n  }else{\n    Intake.setVelocity(100, percent);\n  }\n\n}\n\nvoid catapultcode(){\n  while (Catacheck.pressing() == false) {\n    Catapult.spin(reverse);\n  }\n  \n  if(Catacheck.pressing()){\n    Catapult.stop();\n  }\n\n}\n\n\n\n\n\nint main() {\n  whenStarted1();\n  Brain.Screen.print(\"BOT DIFF\");\n\n  //Catapult code-Pulls back the arm automatically into the loading position(loading position determined by placement of a bumper sensor)\n  Catapult.setStopping(hold);\n  catapultcode();\n\n \n //I got bored and decided to code in a bunch of random functions for no reason\n\n //Brake Function Call- Honestly useless, but it makes the drive stop and try to hold current position\n  Brake();\n  \n  //A function that should increase torque in the drivetrain-\n //Only use when pushing another bot that is resisting strongly as excessive torque may twist axles\n  torqueMode();\n\n  //Another function that should help spin stubborn rollers-it decreases rpm to increase torque in the spinner\n  rollerMode();\n}\n","textLanguage":"cpp","rconfig":[{"port":[7],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[8],"name":"Catapult","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Intake","leftDir":"false","right":"Catapult","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1,2,4,5,null],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180","id":"partner"},"triportSourcePort":null},{"port":[1],"name":"Catacheck","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{"id":"partner"},"triportSourcePort":22},{"port":[3],"name":"leftMotorC","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[6],"name":"rightMotorC","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}